name: Pre-release CI Testing

on:
  push:
    branches:
      - main
      - 'dev-*'

jobs:
  lint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install flake8 black isort pyright
          
      - name: Run flake8
        run: flake8 .

      - name: Run black
        run: black --check .

      - name: Run isort
        run: isort --check .

  type-check:
    runs-on: ubuntu-latest
    env:
      PYRIGHT_PYTHON_FORCE_VERSION: latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyright
          
      - name: Run pyright
        run: pyright

  test:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
          
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio
          pip install -e .
          
      - name: Run tests
        run: pytest -v

  pip-audit:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Install package
        run: python -m pip install .
      - uses: pypa/gh-action-pip-audit@v1.1.0

  cli-sanity:
    runs-on: ubuntu-latest
    needs:
      - lint
      - type-check
      - test
      - pip-audit
    steps:
      - uses: actions/checkout@v4
      - name: Set Up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Package in Editable Mode
        run: |
          python -m pip install --upgrade pip
          pip install -e .
      - name: Validate CLI Does Not Crash
        run: |
          OUTPUT=$(local-operator --hosting test --model test-model exec "print hello world")
          if ! echo "$OUTPUT" | grep -i "I have printed 'Hello World' to the console" > /dev/null; then
            echo "Expected output containing 'I have printed 'Hello World' to the console', but got:"
            echo "$OUTPUT"
            exit 1
          fi

  server-sanity:
    runs-on: ubuntu-latest
    needs:
      - lint
      - type-check
      - test
      - pip-audit
    steps:
      - uses: actions/checkout@v4
      - name: Set Up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Package in Editable Mode
        run: |
          python -m pip install --upgrade pip
          pip install -e .
      - name: Start Server and Test Health Check
        run: |
          # Start the server in the background
          local-operator serve --port 8080 &
          SERVER_PID=$!
          
          # Wait for server to start up and check health (timeout after 30s)
          for i in {1..30}; do
            RESPONSE=$(curl -s http://localhost:8080/health || true)
            if echo "$RESPONSE" | grep -i '"status":200' > /dev/null && echo "$RESPONSE" | grep -i '"message":"ok"' > /dev/null; then
              echo "Server is healthy after $i seconds"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "Server failed to become healthy after 30 seconds. Last response:"
              echo "$RESPONSE"
              kill $SERVER_PID
              exit 1
            fi
            sleep 1
          done

          # Test chat endpoint with test model
          RESPONSE=$(curl -s -X POST http://localhost:8080/v1/chat \
            -H "Content-Type: application/json" \
            -d '{
              "prompt": "print hello world",
              "hosting": "test",
              "model": "test",
              "context": [],
              "options": {
                "temperature": 0.7,
                "top_p": 0.9
              }
            }')
          
          if ! echo "$RESPONSE" | grep -i "I have printed 'Hello World' to the console" > /dev/null; then
            echo "Chat endpoint test failed. Expected output containing 'I have printed 'Hello World' to the console', but got:"
            echo "$RESPONSE"
            kill $SERVER_PID
            exit 1
          fi
          echo "Chat endpoint test passed successfully"

          # Clean up
          kill $SERVER_PID

  cli-e2e:
    runs-on: ubuntu-latest
    needs:
      - lint
      - type-check
      - test
      - pip-audit
    steps:
      - uses: actions/checkout@v4
      - name: Set Up Python 3.12
        uses: actions/setup-python@v5
        with:
          python-version: "3.12"
      - name: Install Package
        run: |
          python -m pip install --upgrade pip
          pip install -e .
      - name: Run CLI E2E Test
        env:
          OPENROUTER_API_KEY: ${{ secrets.OPENROUTER_API_KEY }}
        run: |
          # Run CLI to create test file
          local-operator --hosting openrouter --model google/gemini-2.0-flash-001 execute "create a file called test.txt with the text 'hello world' in it" || exit 1
          
          # Check if file exists and contains correct text
          if [ ! -f test.txt ]; then
            echo "test.txt was not created"
            exit 1
          fi
          
          if ! grep -q "hello world" test.txt; then
            echo "test.txt does not contain expected text"
            cat test.txt
            exit 1
          fi
          
          echo "CLI E2E test passed successfully"